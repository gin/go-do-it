const ZERO_ADDRESS: address = 0x0000000000000000000000000000000000000000

// Debug with .emit() and `fe test --logs`
struct DebugLog {
    pub my_value: u256
}

struct DebugAddress {
    #indexed
    pub my_value: address
}

// Events
struct ArbiterChanged {
    #indexed
    pub new_arbiter: address
}

struct WitnessAdded {
    #indexed
    pub witness: address
}

// Go Do It: a commitment device to help you achieve your goals
// ============================================================================
//
// Commiter deploy contract
//
// Only commiter can add addresses of witnesses
//     to prevent random people voting to reject withdraw
//
// Commiter can withdraw if majority of witnesses don't reject
//
// Witnesses who vote to reject has to stake more than commiter's stake
//     to discourage collusion to burn commiter's stake
//
// If witnesses who reject are minority, their stakes are burned

contract GoDoIt {
    // States
    committer: address
    commit_amount: u256
    commit_time: u256
    commit_end_time: u256   // ctx.blocktime_timestamp() + commit_time
    has_ended: bool
    has_withdrawn: bool

    // witnesses: Map<witness_address, [amount_staked, vote_to_reject, is_not_witness]>
    // (vote_to_reject: 1 means reject, 0 means not reject)
    witnesses: Map<address, Array<u256, 3>> 
    num_witnesses: i256
    num_witnesses_reject: i256

    arbiter: address

    // Constructor
    pub fn __init__(mut self, ctx: Context, commit_time: u256) {
        self.arbiter = ctx.msg_sender()
        self.committer = ctx.msg_sender()
        self.commit_amount = ctx.msg_value()
        self.commit_time = commit_time
        self.commit_end_time = ctx.block_timestamp() + commit_time

        // todo: Would these increase gas?
        // self.has_ended = false
        // self.has_withdrawn = false
        // self.num_witnesses = 0
        // self.num_witnesses_reject = 0
    }

    pub fn change_arbiter(mut self, mut ctx: Context, new_arbiter: address) {
        // Arbiter defaults to deployer, to decide if commiter can withdraw when votes are evenly split.
        // But maybe this role is not needed. (by round down to allow withdraw when votes are evenly split)
        assert new_arbiter != ZERO_ADDRESS
        self.arbiter = new_arbiter

        ctx.emit(ArbiterChanged(new_arbiter: new_arbiter))
    }

    pub fn add_witness(mut self, mut ctx: Context, witness: address) {
        // Only commiter can add who can be witnesses
        // to avoid random people joining to vote reject.
        assert witness != ZERO_ADDRESS
        assert witness != self.arbiter
        self.witnesses[witness] = [0, 0, 0]

        self.num_witnesses += 1
        ctx.emit(WitnessAdded(witness: witness))
    }

    pub fn vote_reject(mut self, mut ctx: Context) {
        // This function is the only function that witnesses have to care about.
        // Call when commiter is unable to achieve goal.
        assert self.witnesses[ctx.msg_sender()][2] == 0, "Must be a witness"

        self.witnesses[ctx.msg_sender()][0] = ctx.msg_value()  // Amount staked
        self.witnesses[ctx.msg_sender()][1] = 1                // Reject
        self.num_witnesses_reject += 1
    }

    pub fn withdraw(mut self, mut ctx: Context) {
        assert self.has_withdrawn == false
        assert self.can_withdraw()

        self.has_withdrawn = true   // Reentrancy guard
        ctx.send_value(to: ctx.msg_sender(), wei: self.commit_amount)
        self.commit_amount = 0

        // self.return_stakes(ctx)  // todo: Return stake to witnesses
    }

    // View functions
    pub fn check_arbiter(self) -> address {
        return self.arbiter
    }

    pub fn check_num_witnesses(self) -> i256 {
        return self.num_witnesses
    }

    pub fn check_num_witnesses_reject(self) -> i256 {
        return self.num_witnesses_reject
    }

    pub fn check_witness_stake(self, witness: address) -> u256 {
        // Amount staked by witness
        return self.witnesses[witness][0]
    }

    pub fn check_witness_vote(self, witness: address) -> u256 {
        // 1 means reject, 0 means not reject
        return self.witnesses[witness][1]
    }

    pub fn check_witness_status(self, witness: address) -> u256 {
        // 1 means not a witness anymore, 0 means is a witness
        return self.witnesses[witness][2]
    }

    pub fn is_majority_reject(self) -> bool {
        return self.num_witnesses_reject > self.num_witnesses / 2
    }

    pub fn can_withdraw(self) -> bool {
        if self.has_ended {
            // self.is_majority_reject = self.is_majority_reject()
            if self.is_majority_reject() == false {
                return true
            }
        }
        return false
    }

    pub fn check_commit_amount(self) -> u256 {
        return self.commit_amount
    }

    pub fn check_commit_time(self) -> u256 {
        return self.commit_time
    }

    pub fn check_commit_end_time(self) -> u256 {
        return self.commit_end_time
    }   
}

// #test
// fn test_arbiter_is_init_to_deployer(mut ctx: Context) {
//     // Create a new `GoDoIt` contract via `ctx` and test that arbiter is initialized to deployer.
//     let c: GoDoIt = GoDoIt.create(ctx, 0)
//     // ctx.emit(Debug(my_value: c.check_arbiter()))
//     // ctx.emit(Debug(my_value: ZERO_ADDRESS))
//     // let mut arbiter: address = c.arbiter
//     // ctx.emit(Debug(my_value: arbiter))
//     // assert c.check_arbiter() == ctx.msg_sender()
//     // assert c.check_arbiter() == self.msg_sender()
//     // c.check_arbiter()
//     // assert ctx.msg_sender() == ZERO_ADDRESS 
//     assert c.arbiter == ZERO_ADDRESS 
// }

// #test
// fn test_arbiter_can_change(mut ctx: Context) {
//     // Create a new `GoDoIt` contract via `ctx` and test that arbiters can be changed.
//     let mut c: GoDoIt = GoDoIt.create(ctx, 0)
//     // c.change_arbiter(ctx, new_arbiter: ZERO_ADDRESS)
//     // let s: address = c.check_arbiter()
//     // assert c.check_arbiter() == ZERO_ADDRESS
//     // ctx.emit(Debug(my_value: ZERO_ADDRESS))
//     let mut a: address = c.check_arbiter()
//     ctx.emit(Debug(my_value: address(a)))
//     assert true
// }

// Question: There might be a bug in assignment within #test attribute?
// Answer:   From Discord, testing library currently in development.
//           It is good for testing libraries for now.
